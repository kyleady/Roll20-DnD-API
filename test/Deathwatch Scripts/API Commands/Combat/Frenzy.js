var expect = require('chai').expect;
var fs = require('fs');
var path = require('path');
require('mock20');
describe('frenzy()', function() {
	it('should temporarily increase WS, S, T, Wp and decrease BS and It', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});
    var WSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'WS'})[0];
    var BSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'BS'})[0];
    var Sattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'S'})[0];
    var Tattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'T'})[0];
    var Itattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'It'})[0];
    var Wpattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'Wp'})[0];

		expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!frenzy');
    expect(WSattr.get('current')).to.equal(10);
    expect(BSattr.get('current')).to.equal(-20);
    expect(Sattr.get('current')).to.equal(10);
    expect(Tattr.get('current')).to.equal(10);
    expect(Itattr.get('current')).to.equal(-20);
    expect(Wpattr.get('current')).to.equal(10);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
  });
  it('should not frenzy a character that is already frenzied', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});
    var WSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'WS'})[0];
    var BSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'BS'})[0];
    var Sattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'S'})[0];
    var Tattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'T'})[0];
    var Itattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'It'})[0];
    var Wpattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'Wp'})[0];

		expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!frenzy');
    expect(WSattr.get('current')).to.equal(10);
    expect(BSattr.get('current')).to.equal(-20);
    expect(Sattr.get('current')).to.equal(10);
    expect(Tattr.get('current')).to.equal(10);
    expect(Itattr.get('current')).to.equal(-20);
    expect(Wpattr.get('current')).to.equal(10);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!frenzy');
    expect(WSattr.get('current')).to.equal(10);
    expect(BSattr.get('current')).to.equal(-20);
    expect(Sattr.get('current')).to.equal(10);
    expect(Tattr.get('current')).to.equal(10);
    expect(Itattr.get('current')).to.equal(-20);
    expect(Wpattr.get('current')).to.equal(10);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
  });
  it('should mark a frenzied character with a red dot', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});

    expect(graphic.get('status_red')).to.equal(false);
    player.MOCK20chat('!frenzy');
    expect(graphic.get('status_red')).to.equal(true);
  });
  it('should temporarily increase WS, S, T, Wp and decrease BS and It', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});
    var WSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'WS'})[0];
    var BSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'BS'})[0];
    var Sattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'S'})[0];
    var Tattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'T'})[0];
    var Itattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'It'})[0];
    var Wpattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'Wp'})[0];

		expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!frenzy');
    expect(WSattr.get('current')).to.equal(10);
    expect(BSattr.get('current')).to.equal(-20);
    expect(Sattr.get('current')).to.equal(10);
    expect(Tattr.get('current')).to.equal(10);
    expect(Itattr.get('current')).to.equal(-20);
    expect(Wpattr.get('current')).to.equal(10);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!unfrenzy');
    expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
  });
  it('should not frenzy a character that is already frenzied', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});
    var WSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'WS'})[0];
    var BSattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'BS'})[0];
    var Sattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'S'})[0];
    var Tattr  = findObjs({_type: 'attribute', _characterid: character.id, name: 'T'})[0];
    var Itattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'It'})[0];
    var Wpattr = findObjs({_type: 'attribute', _characterid: character.id, name: 'Wp'})[0];

		expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!frenzy');
    expect(WSattr.get('current')).to.equal(10);
    expect(BSattr.get('current')).to.equal(-20);
    expect(Sattr.get('current')).to.equal(10);
    expect(Tattr.get('current')).to.equal(10);
    expect(Itattr.get('current')).to.equal(-20);
    expect(Wpattr.get('current')).to.equal(10);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!unfrenzy');
    expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
    player.MOCK20chat('!unfrenzy');
    expect(WSattr.get('current')).to.equal(0);
    expect(BSattr.get('current')).to.equal(0);
    expect(Sattr.get('current')).to.equal(0);
    expect(Tattr.get('current')).to.equal(0);
    expect(Itattr.get('current')).to.equal(0);
    expect(Wpattr.get('current')).to.equal(0);
    expect(WSattr.get('max')).to.equal(0);
    expect(BSattr.get('max')).to.equal(0);
    expect(Sattr.get('max')).to.equal(0);
    expect(Tattr.get('max')).to.equal(0);
    expect(Itattr.get('max')).to.equal(0);
    expect(Wpattr.get('max')).to.equal(0);
  });
  it('should unmark an unfrenzied character by removing the red dot', function(){
		Campaign().MOCK20reset();
		var filePath = path.join(__dirname, '..', '..', '..', '..', 'INQTotal.js');
		var MyScript = fs.readFileSync(filePath, 'utf8');
		eval(MyScript);
		MOCK20endOfLastScript();

		var player = createObj('player', {_displayname: 'frenzy player'}, {MOCK20override: true});
    var inqcharacter = new INQCharacter();
    var character = inqcharacter.toCharacterObj();
		character.set('controlledby', player.id);
		var page = createObj('page', {name: 'frenzy page'}, {MOCK20override: true});
    var graphic = createObj('graphic', {name: 'frenzy graphic', _pageid: page.id, represents: character.id, bar1_link: 'something'});

    expect(graphic.get('status_red')).to.equal(false);
    player.MOCK20chat('!frenzy');
    expect(graphic.get('status_red')).to.equal(true);
    player.MOCK20chat('!unfrenzy');
    expect(graphic.get('status_red')).to.equal(false);
  });
});
